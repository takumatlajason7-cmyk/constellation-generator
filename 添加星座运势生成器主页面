<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="ÁîüÂëΩÊñπÁ®ãÂºè - ‰∏ì‰∏öÊòüÂ∫ßËøêÂäøÁîüÊàêÂô®ÔºåÂü∫‰∫éËÅöÂêàÊï∞ÊçÆAPIÁöÑÊô∫ËÉΩÊòüÂ∫ßËøêÂäøÂàÜÊûêÁ≥ªÁªü">
    <meta name="keywords" content="ÊòüÂ∫ß,ËøêÂäø,Âç†Âçú,ÁîüÂëΩÊñπÁ®ãÂºè,ÊòüÂ∫ßËøêÂäø,ÊØèÊó•ËøêÂäø">
    <meta name="author" content="ÁîüÂëΩÊñπÁ®ãÂºèÂõ¢Èòü">
    <title>ÁîüÂëΩÊñπÁ®ãÂºè - ‰∏ì‰∏öÊòüÂ∫ßËøêÂäøÁîüÊàêÂô®</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='0.9em' font-size='90'>üåü</text></svg>">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Microsoft YaHei', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0d1f0d 0%, #1a3d1a 30%, #2d5a2d 70%, #1a3d1a 100%);
            min-height: 100vh;
            color: #E8F5E8;
            overflow-x: hidden;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            position: relative;
        }

        .main-title {
            font-size: 3rem;
            color: #E8F5E8;
            margin-bottom: 10px;
            text-shadow: 0 0 20px rgba(144, 238, 144, 0.5);
            animation: titleGlow 3s ease-in-out infinite alternate;
            font-weight: 700;
        }

        @keyframes titleGlow {
            0% { text-shadow: 0 0 20px rgba(144, 238, 144, 0.5), 0 0 40px rgba(144, 238, 144, 0.2); }
            100% { text-shadow: 0 0 30px rgba(144, 238, 144, 0.8), 0 0 60px rgba(144, 238, 144, 0.4); }
        }

        .subtitle {
            font-size: 1.3rem;
            color: #90EE90;
            margin-bottom: 10px;
            font-weight: 300;
        }

        .version-info {
            font-size: 0.9rem;
            color: #98FB98;
            opacity: 0.8;
            margin-bottom: 30px;
        }

        .feature-badges {
            display: flex;
            justify-content: center;
            gap: 10px;
            margin-bottom: 30px;
            flex-wrap: wrap;
        }

        .badge {
            background: rgba(144, 238, 144, 0.2);
            color: #90EE90;
            padding: 5px 12px;
            border-radius: 15px;
            font-size: 0.85rem;
            border: 1px solid rgba(144, 238, 144, 0.3);
        }

        .api-config {
            background: rgba(255, 255, 255, 0.05);
            padding: 25px;
            border-radius: 20px;
            margin-bottom: 30px;
            border: 2px solid rgba(144, 238, 144, 0.2);
            backdrop-filter: blur(10px);
            transition: all 0.3s ease;
        }

        .api-config:hover {
            border-color: rgba(144, 238, 144, 0.4);
            box-shadow: 0 5px 25px rgba(144, 238, 144, 0.1);
        }

        .config-title {
            color: #90EE90;
            margin-bottom: 20px;
            font-size: 1.4rem;
            text-align: center;
        }

        .config-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
        }

        .config-item {
            margin-bottom: 15px;
        }

        .config-item label {
            display: block;
            margin-bottom: 8px;
            color: #ADFF2F;
            font-weight: 600;
            font-size: 0.95rem;
        }

        .config-item input, .config-item select {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid rgba(144, 238, 144, 0.3);
            border-radius: 10px;
            background: rgba(255, 255, 255, 0.1);
            color: #E8F5E8;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .config-item input:focus, .config-item select:focus {
            outline: none;
            border-color: #90EE90;
            box-shadow: 0 0 15px rgba(144, 238, 144, 0.3);
            background: rgba(255, 255, 255, 0.15);
        }

        .config-item input::placeholder {
            color: rgba(232, 245, 232, 0.6);
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 40px;
            flex-wrap: wrap;
        }

        .btn {
            background: linear-gradient(45deg, #2d5a2d, #4a7c59);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .btn:hover::before {
            left: 100%;
        }

        .btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
            background: linear-gradient(45deg, #4a7c59, #5d9f6e);
        }

        .btn.primary {
            background: linear-gradient(45deg, #228B22, #32CD32);
            font-size: 1.3rem;
            padding: 18px 40px;
            animation: pulseGreen 2s ease-in-out infinite;
        }

        @keyframes pulseGreen {
            0%, 100% { box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3); }
            50% { box-shadow: 0 4px 25px rgba(50, 205, 50, 0.4), 0 0 20px rgba(50, 205, 50, 0.2); }
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        .btn:disabled:hover {
            transform: none;
        }

        .status {
            text-align: center;
            margin: 20px 0;
            padding: 25px;
            border-radius: 20px;
            font-weight: 500;
            white-space: pre-line;
            backdrop-filter: blur(15px);
            border: 2px solid transparent;
            transition: all 0.3s ease;
            line-height: 1.6;
        }

        .status.loading {
            background: rgba(255, 193, 7, 0.15);
            color: #FFC107;
            border-color: rgba(255, 193, 7, 0.5);
            animation: loadingPulse 1.5s ease-in-out infinite;
        }

        @keyframes loadingPulse {
            0%, 100% { transform: scale(1); opacity: 0.8; }
            50% { transform: scale(1.02); opacity: 1; }
        }

        .status.success {
            background: rgba(40, 167, 69, 0.15);
            color: #28A745;
            border-color: rgba(40, 167, 69, 0.5);
            animation: successGlow 0.5s ease-out;
        }

        @keyframes successGlow {
            0% { transform: scale(0.95); opacity: 0; }
            100% { transform: scale(1); opacity: 1; }
        }

        .status.error {
            background: rgba(220, 53, 69, 0.15);
            color: #DC3545;
            border-color: rgba(220, 53, 69, 0.5);
            animation: errorShake 0.5s ease-out;
        }

        @keyframes errorShake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        .status.info {
            background: rgba(23, 162, 184, 0.15);
            color: #17A2B8;
            border-color: rgba(23, 162, 184, 0.5);
        }

        .horoscope-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 25px;
            margin-top: 30px;
        }

        .horoscope-card {
            background: rgba(255, 255, 255, 0.05);
            border: 2px solid rgba(144, 238, 144, 0.2);
            border-radius: 20px;
            padding: 25px;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            position: relative;
            overflow: hidden;
        }

        .horoscope-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #228B22, #32CD32, #90EE90);
            transform: translateX(-100%);
            transition: transform 0.3s ease;
        }

        .horoscope-card:hover::before {
            transform: translateX(0);
        }

        .horoscope-card:hover {
            border-color: rgba(144, 238, 144, 0.5);
            box-shadow: 0 10px 30px rgba(144, 238, 144, 0.15);
            transform: translateY(-5px);
        }

        .card-title {
            font-size: 1.6rem;
            color: #90EE90;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 700;
        }

        .card-content {
            line-height: 1.7;
        }

        .card-content h4 {
            color: #ADFF2F;
            margin: 15px 0 8px 0;
            font-size: 1.1rem;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .star-rating {
            color: #FFD700;
            font-size: 1.2rem;
            margin-left: 5px;
        }

        .lucky-info {
            background: rgba(144, 238, 144, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin-top: 15px;
            border-left: 4px solid #90EE90;
        }

        .color-preview {
            display: inline-block;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin: 0 8px;
            vertical-align: middle;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .hidden {
            display: none;
        }

        .api-info {
            background: rgba(23, 162, 184, 0.15);
            padding: 20px;
            border-radius: 15px;
            border: 2px solid rgba(23, 162, 184, 0.3);
            margin-bottom: 25px;
            color: #17A2B8;
        }

        .api-info h3 {
            margin-bottom: 10px;
            color: #17A2B8;
        }

        .api-links {
            text-align: center;
            margin: 30px 0;
            padding: 20px;
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .api-links a {
            color: #90EE90;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .api-links a:hover {
            color: #ADFF2F;
            text-shadow: 0 0 10px rgba(173, 255, 47, 0.5);
        }

        .footer {
            text-align: center;
            margin-top: 60px;
            padding: 40px 20px;
            border-top: 2px solid rgba(144, 238, 144, 0.2);
            color: #98FB98;
        }

        .footer p {
            margin: 10px 0;
        }

        .footer .copyright {
            font-size: 0.9rem;
            opacity: 0.8;
            margin-top: 20px;
        }

        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 2px solid #90EE90;
            animation: spin 1s linear infinite;
            margin-right: 10px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* ÂìçÂ∫îÂºèËÆæËÆ° */
        @media (max-width: 768px) {
            .container {
                padding: 15px;
            }
            
            .main-title {
                font-size: 2.2rem;
            }
            
            .controls {
                flex-direction: column;
                align-items: center;
            }
            
            .btn {
                width: 100%;
                max-width: 300px;
                margin: 8px 0;
            }
            
            .horoscope-grid {
                grid-template-columns: 1fr;
            }
            
            .config-grid {
                grid-template-columns: 1fr;
            }
            
            .feature-badges {
                justify-content: center;
            }
        }

        @media (max-width: 480px) {
            .main-title {
                font-size: 1.8rem;
            }
            
            .api-config {
                padding: 20px;
            }
            
            .horoscope-card {
                padding: 20px;
            }
        }

        /* ÊâìÂç∞Ê†∑Âºè */
        @media print {
            body {
                background: white !important;
                color: black !important;
            }
            
            .controls, .api-config {
                display: none !important;
            }
            
            .horoscope-card {
                border: 1px solid #ccc !important;
                box-shadow: none !important;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1 class="main-title">üåü ÁîüÂëΩÊñπÁ®ãÂºè</h1>
            <p class="subtitle" id="dateSubtitle">‰∏ì‰∏öÊòüÂ∫ßËøêÂäøÁîüÊàêÂô®</p>
            <p class="version-info">GitHub Pages ÈÉ®ÁΩ≤Áâà | Âü∫‰∫éËÅöÂêàÊï∞ÊçÆAPI</p>
            
            <div class="feature-badges">
                <span class="badge">üîÆ AIÁÆóÊ≥ï</span>
                <span class="badge">üìä ÂõõÁª¥ËØÑÂàÜ</span>
                <span class="badge">üåà Âπ∏ËøêËâ≤ÂΩ©</span>
                <span class="badge">‚≠ê ÂÆûÊó∂Êï∞ÊçÆ</span>
                <span class="badge">üì± ÂìçÂ∫îÂºè</span>
            </div>
        </header>

        <div class="api-info">
            <h3>üì° APIÊï∞ÊçÆËØ¥Êòé</h3>
            <p>Êú¨Â∫îÁî®ÈõÜÊàêËÅöÂêàÊï∞ÊçÆÊòüÂ∫ßËøêÂäøAPIÔºåÊèê‰æõÁúüÂÆûÂáÜÁ°ÆÁöÑÊòüÂ∫ßËøêÂäøÊï∞ÊçÆ„ÄÇÊîØÊåÅ‰ªäÊó•„ÄÅÊòéÊó•„ÄÅÊú¨Âë®„ÄÅÊú¨ÊúàÂ§öÁßçËøêÂäøÁ±ªÂûãÔºåÂåÖÂê´Áà±ÊÉÖ„ÄÅÂ∑•‰Ωú„ÄÅË¥¢Ëøê„ÄÅÂÅ•Â∫∑ÂõõÁª¥Â∫¶‰∏ì‰∏öËØÑÂàÜÁ≥ªÁªü„ÄÇ</p>
        </div>

        <div class="api-config">
            <h3 class="config-title">üîë APIÈÖçÁΩÆ‰∏≠ÂøÉ</h3>
            
            <div class="config-grid">
                <div class="config-item">
                    <label for="apiKey">üîê ËÅöÂêàÊï∞ÊçÆAPIÂØÜÈí•:</label>
                    <input type="password" id="apiKey" placeholder="ËØ∑ËæìÂÖ•ÊÇ®ÁöÑAPI Key" />
                </div>

                <div class="config-item">
                    <label for="consType">üìÖ ËøêÂäøÊü•ËØ¢Á±ªÂûã:</label>
                    <select id="consType">
                        <option value="today">‰ªäÊó•ËøêÂäø</option>
                        <option value="tomorrow">ÊòéÊó•ËøêÂäø</option>
                        <option value="week">Êú¨Âë®ËøêÂäø</option>
                        <option value="month">Êú¨ÊúàËøêÂäø</option>
                    </select>
                </div>

                <div class="config-item">
                    <label for="targetConstellation">üéØ ÊåáÂÆöÊòüÂ∫ßÊü•ËØ¢:</label>
                    <select id="targetConstellation">
                        <option value="">Ëé∑ÂèñÂÖ®ÈÉ®12ÊòüÂ∫ß</option>
                        <option value="aries">‚ôà ÁôΩÁæäÂ∫ß (3.21-4.19)</option>
                        <option value="taurus">‚ôâ ÈáëÁâõÂ∫ß (4.20-5.20)</option>
                        <option value="gemini">‚ôä ÂèåÂ≠êÂ∫ß (5.21-6.21)</option>
                        <option value="cancer">‚ôã Â∑®ËüπÂ∫ß (6.22-7.22)</option>
                        <option value="leo">‚ôå ÁãÆÂ≠êÂ∫ß (7.23-8.22)</option>
                        <option value="virgo">‚ôç Â§ÑÂ•≥Â∫ß (8.23-9.22)</option>
                        <option value="libra">‚ôé Â§©Áß§Â∫ß (9.23-10.23)</option>
                        <option value="scorpio">‚ôè Â§©ËùéÂ∫ß (10.24-11.22)</option>
                        <option value="sagittarius">‚ôê Â∞ÑÊâãÂ∫ß (11.23-12.21)</option>
                        <option value="capricorn">‚ôë Êë©ÁæØÂ∫ß (12.22-1.19)</option>
                        <option value="aquarius">‚ôí Ê∞¥Áì∂Â∫ß (1.20-2.18)</option>
                        <option value="pisces">‚ôì ÂèåÈ±ºÂ∫ß (2.19-3.20)</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="controls">
            <button class="btn primary" id="fetchBtn">
                üåü Ëé∑ÂèñÁúüÂÆûËøêÂäø
            </button>
            <button class="btn" id="testApiBtn">
                üîß ÊµãËØïAPIËøûÊé•
            </button>
            <button class="btn" id="demoBtn">
                üé≠ ÊºîÁ§∫Ê®°Âºè
            </button>
            <button class="btn" id="clearBtn">
                üóëÔ∏è Ê∏ÖÈô§Êï∞ÊçÆ
            </button>
        </div>

        <div id="statusMessage" class="status hidden"></div>

        <div id="horoscopeResults" class="horoscope-grid hidden"></div>

        <div class="api-links">
            <p><strong>üìö APIÊñáÊ°£:</strong> <a href="https://www.juhe.cn/docs/api/id/58" target="_blank" rel="noopener">ËÅöÂêàÊï∞ÊçÆÊòüÂ∫ßËøêÂäøAPI</a></p>
            <p><strong>üîë Ëé∑ÂèñÂØÜÈí•:</strong> <a href="https://www.juhe.cn/" target="_blank" rel="noopener">ËÅöÂêàÊï∞ÊçÆÂÆòÁΩëÊ≥®ÂÜå</a></p>
            <p><strong>üí° ‰ΩøÁî®ËØ¥Êòé:</strong> Ê≥®ÂÜåË¥¶Âè∑ ‚Üí Áî≥ËØ∑API ‚Üí Â§çÂà∂ÂØÜÈí• ‚Üí Á≤òË¥¥Âà∞‰∏äÊñπÈÖçÁΩÆ</p>
        </div>

        <footer class="footer">
            <p><strong>üéâ ÁîüÂëΩÊñπÁ®ãÂºè - ËÆ©ÊòüÂ∫ßËøêÂäøÊõ¥ÁßëÂ≠¶</strong></p>
            <p>‚ú® Âü∫‰∫éËÅöÂêàÊï∞ÊçÆAPIÁöÑ‰∏ì‰∏öÊòüÂ∫ßÂàÜÊûêÁ≥ªÁªü</p>
            <p>üåü ÊîØÊåÅÂõõÁª¥ËØÑÂàÜ | Âπ∏ËøêÂÖÉÁ¥† | Â§öÁ±ªÂûãÊü•ËØ¢</p>
            <p>üì± ÂÆåÁæéÈÄÇÈÖçÁßªÂä®Á´Ø | GitHub PagesÂÖçË¥πÊâòÁÆ°</p>
            <div class="copyright">
                <p>&copy; 2024 ÁîüÂëΩÊñπÁ®ãÂºèÂõ¢Èòü | ‰ªÖ‰æõÂ®±‰πêÂèÇËÄÉ | <a href="https://github.com" target="_blank" rel="noopener" style="color: #90EE90;">GitHubÂºÄÊ∫ê</a></p>
            </div>
        </footer>
    </div>

    <script>
        // ÊºîÁ§∫Ê®°ÂºèÊï∞ÊçÆÁîüÊàê
        function generateDemoData() {
            const demoTexts = {
                summary: [
                    '‰ªäÊó•ËøêÂäøÊï¥‰ΩìÂëà‰∏äÂçáË∂ãÂäøÔºåÈÄÇÂêàÂÅöÂá∫ÈáçË¶ÅÂÜ≥ÂÆö„ÄÇ',
                    '‰ªäÂ§©ÁöÑËÉΩÈáèÂú∫ÁâπÂà´Âº∫ÔºåÊúâÂà©‰∫é‰∫∫ÈôÖÂÖ≥Á≥ªÂèëÂ±ï„ÄÇ',
                    'ÂÆáÂÆôËÉΩÈáè‰∏∫‰Ω†Â∏¶Êù•Â•ΩËøêÔºåÊääÊè°‰ªäÊó•Êú∫ÈÅá„ÄÇ',
                    '‰ªäÊó•ÈÄÇÂêàÂÜíÈô©ÂíåÂ∞ùËØïÊñ∞‰∫ãÁâ©Ôºå‰ºöÊúâÊÑèÂ§ñÊî∂Ëé∑„ÄÇ',
                    '‰øùÊåÅÁßØÊûÅÂøÉÊÄÅÔºå‰ªäÂ§©Â∞ÜÊúâË¥µ‰∫∫Áõ∏Âä©„ÄÇ'
                ],
                love: ['ÂçïË∫´ËÄÖÊúâÊ°ÉËä±Ëøê', 'ÊÑüÊÉÖÁîüÊ¥ªÁîúËúú', 'ÈúÄË¶ÅÂ§öÊ≤üÈÄöÁêÜËß£', 'Áà±ÊÉÖËøêÂäø‰∏äÂçá', 'ÊúâÊúõÈÅáÂà∞ÁúüÁà±'],
                work: ['Â∑•‰ΩúÊïàÁéáÂæàÈ´ò', 'ÂÆπÊòìËé∑ÂæóËÆ§ÂèØ', 'ÈÄÇÂêàÂõ¢ÈòüÂêà‰Ωú', 'ÊúâÂçáËÅåÊú∫‰ºö', 'ÂàõÊÑèÁÅµÊÑü‰∏∞ÂØå'],
                money: ['Ë¥¢Ëøê‰∫®ÈÄö', 'ÊäïËµÑÈúÄË∞®ÊÖé', 'ÊúâÊÑèÂ§ñÊî∂ÂÖ•', 'ÁêÜË¥¢Ëøê‰Ω≥', 'Ê∂àË¥πË¶ÅËäÇÂà∂'],
                health: ['Á≤æÁ•ûÁä∂ÊÄÅÈ•±Êª°', 'Ê≥®ÊÑè‰ºëÊÅØ', 'ÈÄÇÂêàËøêÂä®', '‰øùÊåÅÂ•ΩÂøÉÊÉÖ', 'Ëê•ÂÖªË¶ÅÂùáË°°']
            };

            const colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8', '#F7DC6F'];
            const numbers = [1, 3, 6, 8, 9, 11, 16, 18, 21, 28];

            return Object.keys(constellationMap).map(key => {
                const randomColor = colors[Math.floor(Math.random() * colors.length)];
                const randomNumber = numbers[Math.floor(Math.random() * numbers.length)];
                const randomFriend = Object.keys(constellationMap)[Math.floor(Math.random() * 12)];
                
                return {
                    name: key,
                    summary: demoTexts.summary[Math.floor(Math.random() * demoTexts.summary.length)],
                    love: Math.floor(Math.random() * 3) + 3, // 3-5Êòü
                    love_txt: demoTexts.love[Math.floor(Math.random() * demoTexts.love.length)],
                    work: Math.floor(Math.random() * 3) + 3,
                    work_txt: demoTexts.work[Math.floor(Math.random() * demoTexts.work.length)],
                    money: Math.floor(Math.random() * 3) + 3,
                    money_txt: demoTexts.money[Math.floor(Math.random() * demoTexts.money.length)],
                    health: Math.floor(Math.random() * 3) + 3,
                    health_txt: demoTexts.health[Math.floor(Math.random() * demoTexts.health.length)],
                    color: randomColor,
                    number: randomNumber,
                    QFriend: randomFriend
                };
            });
        }

        // ÊºîÁ§∫Ê®°Âºè
        function runDemoMode() {
            if (isLoading) {
                showStatus('‚ö†Ô∏è ËØ∑Á≠âÂæÖÂΩìÂâçÊìç‰ΩúÂÆåÊàê', 'info');
                return;
            }

            setLoading(true);
            showStatus('üé≠ ÂêØÂä®ÊºîÁ§∫Ê®°ÂºèÔºåÁîüÊàêÊ®°ÊãüËøêÂäøÊï∞ÊçÆ...', 'loading');

            setTimeout(() => {
                const targetConstellation = safeGetElement('targetConstellation')?.value;
                const demoData = generateDemoData();
                
                if (targetConstellation) {
                    const singleData = demoData.find(item => item.name === targetConstellation);
                    if (singleData) {
                        displayResults(singleData, true);
                        showStatus(`‚úÖ ÊºîÁ§∫Ê®°ÂºèÔºö${constellationMap[targetConstellation].name}ËøêÂäøÂ∑≤ÁîüÊàêÔºÅ

üé≠ ËøôÊòØÊ®°ÊãüÊï∞ÊçÆÔºåÂ±ïÁ§∫Â∫îÁî®ÁïåÈù¢ÂíåÂäüËÉΩ
üí° Ë¶ÅËé∑ÂèñÁúüÂÆûÊï∞ÊçÆÔºåËØ∑ÈÖçÁΩÆAPIÂØÜÈí•ÂêéÁÇπÂáª"Ëé∑ÂèñÁúüÂÆûËøêÂäø"
üåü ÊºîÁ§∫Êï∞ÊçÆ‰ªÖ‰æõÁïåÈù¢È¢ÑËßàÔºå‰∏çÂÖ∑ÊúâÂÆûÈôÖÂèÇËÄÉ‰ª∑ÂÄº`, 'success');
                    }
                } else {
                    displayResults(demoData, true);
                    showStatus(`‚úÖ ÊºîÁ§∫Ê®°ÂºèÔºö12ÊòüÂ∫ßËøêÂäøÂ∑≤ÂÖ®ÈÉ®ÁîüÊàêÔºÅ

üé≠ ÊºîÁ§∫ÂäüËÉΩËØ¥ÊòéÔºö
‚Ä¢ ËøôÊòØÂÆåÂÖ®Ê®°ÊãüÁöÑÊï∞ÊçÆÔºå‰ªÖÁî®‰∫éÂ±ïÁ§∫ÁïåÈù¢ÊïàÊûú
‚Ä¢ ÂåÖÂê´ÂõõÁª¥ËØÑÂàÜ„ÄÅÂπ∏ËøêÂÖÉÁ¥†Á≠âÂÆåÊï¥‰ø°ÊÅØ
‚Ä¢ ÁúüÂÆûÊï∞ÊçÆÈúÄË¶ÅÈÖçÁΩÆËÅöÂêàÊï∞ÊçÆAPIÂØÜÈí•Ëé∑Âèñ

üí° ‰ΩìÈ™åÂÆåÊØïÂêéÔºåËØ∑ÈÖçÁΩÆAPIËé∑ÂèñÁúüÂÆûËøêÂäøÊï∞ÊçÆÔºÅ`, 'success');
                }
                
                setLoading(false);
            }, 2000);
        }

        // Ëé∑ÂèñÊòüÂ∫ßËøêÂäøÊï∞ÊçÆ
        async function fetchHoroscopeData() {
            if (isLoading) {
                showStatus('‚ö†Ô∏è ËØ∑Á≠âÂæÖÂΩìÂâçÊìç‰ΩúÂÆåÊàê', 'info');
                return;
            }

            const apiKey = safeGetElement('apiKey')?.value.trim();
            const consType = safeGetElement('consType')?.value || 'today';
            const targetConstellation = safeGetElement('targetConstellation')?.value;

            if (!apiKey) {
                showStatus(`‚ùå ËØ∑ÂÖàÈÖçÁΩÆAPIÂØÜÈí•ÔºÅ

üîë Ëé∑ÂèñÊ≠•È™§Ôºö
1. ËÆøÈóÆËÅöÂêàÊï∞ÊçÆÂÆòÁΩë (juhe.cn)
2. Ê≥®ÂÜåË¥¶Âè∑Âπ∂ÂÆûÂêçËÆ§ËØÅ
3. Áî≥ËØ∑"ÊòüÂ∫ßËøêÂäø"API
4. Â§çÂà∂APIÂØÜÈí•Âà∞‰∏äÊñπËæìÂÖ•Ê°Ü
5. ÁÇπÂáª"ÊµãËØïËøûÊé•"Á°ÆËÆ§ÂèØÁî®

üí° ÊàñËÄÖÂÖàÁÇπÂáª"ÊºîÁ§∫Ê®°Âºè"‰ΩìÈ™åÁïåÈù¢ÊïàÊûú`, 'error', false);
                return;
            }

            setLoading(true);
            showStatus('üöÄ Ê≠£Âú®ËøûÊé•ËÅöÂêàÊï∞ÊçÆAPIËé∑ÂèñÁúüÂÆûËøêÂäøÊï∞ÊçÆ...', 'loading');

            try {
                if (targetConstellation) {
                    // Ëé∑ÂèñÂçï‰∏™ÊòüÂ∫ß
                    const url = `https://apis.juhe.cn/fapig/constellation/getAll?key=${apiKey}&consName=${targetConstellation}&type=${consType}`;
                    
                    showStatus(`üîç Ê≠£Âú®Ëé∑Âèñ${constellationMap[targetConstellation].name}ÁöÑ${getTypeDisplayName()}ËøêÂäø...`, 'loading');
                    
                    const response = await fetch(url);
                    const result = await response.json();
                    
                    if (result.error_code === 0) {
                        currentData = result.result;
                        displayResults(currentData);
                        showStatus(`‚úÖ ÊàêÂäüËé∑Âèñ${constellationMap[targetConstellation].name}ËøêÂäøÊï∞ÊçÆÔºÅ

üìä Êï∞ÊçÆÊù•Ê∫êÔºöËÅöÂêàÊï∞ÊçÆAPI
üìÖ ËøêÂäøÁ±ªÂûãÔºö${getTypeDisplayName()}ËøêÂäø
‚è∞ Ëé∑ÂèñÊó∂Èó¥Ôºö${new Date().toLocaleString()}
üåü Êï∞ÊçÆË¥®ÈáèÔºöÂÆûÊó∂ÂáÜÁ°Æ`, 'success');
                    } else {
                        throw new Error(`${result.reason} (ÈîôËØØÁ†Å: ${result.error_code})`);
                    }
                } else {
                    // Ëé∑ÂèñÊâÄÊúâÊòüÂ∫ß
                    const constellations = Object.keys(constellationMap);
                    const results = [];
                    let completed = 0;
                    let errors = 0;
                    
                    showStatus(`üåü ÂºÄÂßãËé∑Âèñ12ÊòüÂ∫ß${getTypeDisplayName()}ËøêÂäøÊï∞ÊçÆ...`, 'loading');
                    
                    for (const constellation of constellations) {
                        try {
                            const url = `https://apis.juhe.cn/fapig/constellation/getAll?key=${apiKey}&consName=${constellation}&type=${consType}`;
                            const response = await fetch(url);
                            const result = await response.json();
                            
                            completed++;
                            showStatus(`üîÑ Ëé∑ÂèñËøõÂ∫¶Ôºö${completed}/${constellations.length} - Ê≠£Âú®Â§ÑÁêÜ${constellationMap[constellation].name}`, 'loading');
                            
                            if (result.error_code === 0) {
                                results.push(result.result);
                            } else {
                                errors++;
                                console.warn(`${constellation} Ëé∑ÂèñÂ§±Ë¥•:`, result.reason);
                            }
                            
                            // ÈÅøÂÖçËØ∑Ê±ÇËøá‰∫éÈ¢ëÁπÅ
                            if (completed < constellations.length) {
                                await new Promise(resolve => setTimeout(resolve, 300));
                            }
                            
                        } catch (error) {
                            errors++;
                            console.error(`Ëé∑Âèñ${constellation}ËøêÂäøÂ§±Ë¥•:`, error);
                        }
                    }
                    
                    if (results.length > 0) {
                        currentData = results;
                        displayResults(currentData);
                        showStatus(`‚úÖ ÊâπÈáèËé∑ÂèñÂÆåÊàêÔºÅÊàêÂäüËé∑Âèñ${results.length}‰∏™ÊòüÂ∫ßËøêÂäø

üìä Ëé∑ÂèñÁªüËÆ°Ôºö
‚Ä¢ ÊàêÂäüÔºö${results.length} ‰∏™ÊòüÂ∫ß
‚Ä¢ Â§±Ë¥•Ôºö${errors} ‰∏™ÊòüÂ∫ß  
‚Ä¢ ÊàêÂäüÁéáÔºö${Math.round((results.length / constellations.length) * 100)}%

üìÖ ËøêÂäøÁ±ªÂûãÔºö${getTypeDisplayName()}ËøêÂäø
‚è∞ ÂÆåÊàêÊó∂Èó¥Ôºö${new Date().toLocaleString()}
üíé Êï∞ÊçÆÊù•Ê∫êÔºöËÅöÂêàÊï∞ÊçÆÂÆòÊñπAPI`, 'success');
                    } else {
                        throw new Error('Êú™Ëé∑ÂèñÂà∞‰ªª‰ΩïÊúâÊïàÊï∞ÊçÆ');
                    }
                }
                
            } catch (error) {
                console.error('APIËØ∑Ê±ÇÂ§±Ë¥•:', error);
                showStatus(`‚ùå Ëé∑ÂèñËøêÂäøÊï∞ÊçÆÂ§±Ë¥•

üîç ÈîôËØØ‰ø°ÊÅØÔºö${error.message}

üí° ÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°àÔºö
‚Ä¢ Ê£ÄÊü•APIÂØÜÈí•ÊòØÂê¶Ê≠£Á°Æ
‚Ä¢ Á°ÆËÆ§Ë¥¶Êà∑‰ΩôÈ¢ùÊòØÂê¶ÂÖÖË∂≥
‚Ä¢ È™åËØÅÁΩëÁªúËøûÊé•Áä∂ÊÄÅ
‚Ä¢ Â∞ùËØïÂàáÊç¢ËøêÂäøÁ±ªÂûã
‚Ä¢ ËÅîÁ≥ªËÅöÂêàÊï∞ÊçÆÂÆ¢Êúç

üé≠ ÊàñËÄÖÂÖà‰ΩøÁî®"ÊºîÁ§∫Ê®°Âºè"‰ΩìÈ™åÂäüËÉΩ`, 'error', false);
            } finally {
                setLoading(false);
            }
        }

        // ÊµãËØïAPIËøûÊé•
        async function testApiConnection() {
            if (isLoading) {
                showStatus('‚ö†Ô∏è ËØ∑Á≠âÂæÖÂΩìÂâçÊìç‰ΩúÂÆåÊàê', 'info');
                return;
            }

            const apiKey = safeGetElement('apiKey')?.value.trim();

            if (!apiKey) {
                showStatus(`‚ùå ËØ∑ÂÖàËæìÂÖ•APIÂØÜÈí•ÔºÅ

üîë Ëé∑ÂèñAPIÂØÜÈí•Ê≠•È™§Ôºö
1. ÂâçÂæÄ https://www.juhe.cn
2. Ê≥®ÂÜåÂπ∂ÁôªÂΩïË¥¶Âè∑
3. ÊêúÁ¥¢"ÊòüÂ∫ßËøêÂäø"API
4. Áî≥ËØ∑Êé•Âè£Âπ∂Ëé∑ÂèñÂØÜÈí•
5. Â∞ÜÂØÜÈí•Á≤òË¥¥Âà∞‰∏äÊñπËæìÂÖ•Ê°Ü`, 'error', false);
                return;
            }

            setLoading(true);
            showStatus('üîß Ê≠£Âú®ÊµãËØïAPIËøûÊé•...', 'loading');

            try {
                const testUrl = `https://apis.juhe.cn/fapig/constellation/getAll?key=${apiKey}&consName=aries&type=today`;
                
                showStatus('üîç ÂèëÈÄÅÊµãËØïËØ∑Ê±ÇÂà∞ËÅöÂêàÊï∞ÊçÆÊúçÂä°Âô®...', 'loading');
                
                const response = await fetch(testUrl);
                const result = await response.json();
                
                if (result.error_code === 0) {
                    showStatus(`‚úÖ APIËøûÊé•ÊµãËØïÊàêÂäüÔºÅ

üéØ ÊµãËØïÁªìÊûúËØ¶ÊÉÖÔºö
‚Ä¢ APIÂØÜÈí•ÔºöÊúâÊïà ‚úì
‚Ä¢ ÊúçÂä°Âô®ÂìçÂ∫îÔºöÊ≠£Â∏∏ ‚úì  
‚Ä¢ Êï∞ÊçÆÊ†ºÂºèÔºöÊ≠£Á°Æ ‚úì
‚Ä¢ Ë¥¶Êà∑Áä∂ÊÄÅÔºöÂèØÁî® ‚úì
‚Ä¢ ÊµãËØïÊòüÂ∫ßÔºöÁôΩÁæäÂ∫ß ‚úì

üìä ËøîÂõûÊï∞ÊçÆÈ¢ÑËßàÔºö
‚Ä¢ ËøêÂäøÊ¶ÇËø∞Ôºö${result.result.summary.substring(0, 20)}...
‚Ä¢ Áà±ÊÉÖÊåáÊï∞Ôºö${result.result.love}Êòü
‚Ä¢ Â∑•‰ΩúÊåáÊï∞Ôºö${result.result.work}Êòü
‚Ä¢ Ë¥¢ËøêÊåáÊï∞Ôºö${result.result.money}Êòü
‚Ä¢ ÂÅ•Â∫∑ÊåáÊï∞Ôºö${result.result.health}Êòü

üåü APIÈÖçÁΩÆÂÆåÊàêÔºåÁé∞Âú®ÂèØ‰ª•Ëé∑ÂèñÂÆåÊï¥ËøêÂäøÊï∞ÊçÆ‰∫ÜÔºÅ`, 'success');
                } else {
                    throw new Error(`${result.reason} (ÈîôËØØÁ†Å: ${result.error_code})`);
                }
                
            } catch (error) {
                console.error('APIÊµãËØïÂ§±Ë¥•:', error);
                let errorMessage = `‚ùå APIËøûÊé•ÊµãËØïÂ§±Ë¥•

üîç ÈîôËØØËØ¶ÊÉÖÔºö${error.message}`;

                if (error.message.includes('NetworkError') || error.message.includes('fetch')) {
                    errorMessage += `

üåê ÁΩëÁªúÁõ∏ÂÖ≥ÈóÆÈ¢òÔºö
‚Ä¢ Ê£ÄÊü•ÁΩëÁªúËøûÊé•ÊòØÂê¶Ê≠£Â∏∏
‚Ä¢ Á°ÆËÆ§Èò≤ÁÅ´Â¢ôÊ≤°ÊúâÈòªÊã¶ËØ∑Ê±Ç
‚Ä¢ Â∞ùËØïÂà∑Êñ∞È°µÈù¢ÈáçËØï
‚Ä¢ ÂèØËÉΩÂ≠òÂú®Ë∑®ÂüüÈôêÂà∂ÈóÆÈ¢ò

üí° Âª∫ËÆÆÔºöÂ∞ÜÂ∫îÁî®ÈÉ®ÁΩ≤Âà∞ÊúçÂä°Âô®ÁéØÂ¢ÉËøêË°å`;
                } else if (error.message.includes('key')) {
                    errorMessage += `

üîë APIÂØÜÈí•ÈóÆÈ¢òÔºö
‚Ä¢ Á°ÆËÆ§ÂØÜÈí•Â§çÂà∂ÂÆåÊï¥Êó†ËØØ
‚Ä¢ Ê£ÄÊü•APIÊòØÂê¶Â∑≤Áî≥ËØ∑ÊàêÂäü
‚Ä¢ È™åËØÅË¥¶Êà∑ÊòØÂê¶Â∑≤ÂÆûÂêçËÆ§ËØÅ
‚Ä¢ Á°ÆËÆ§APIÊúçÂä°Áä∂ÊÄÅÊ≠£Â∏∏`;
                }

                errorMessage += `

üé≠ ‰∏¥Êó∂Ëß£ÂÜ≥ÊñπÊ°àÔºöÁÇπÂáª"ÊºîÁ§∫Ê®°Âºè"‰ΩìÈ™åÂäüËÉΩ`;

                showStatus(errorMessage, 'error', false);
            } finally {
                setLoading(false);
            }
        }

        // ÈîÆÁõòÂø´Êç∑ÈîÆ
        function setupKeyboardShortcuts() {
            document.addEventListener('keydown', function(e) {
                if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA' || e.target.tagName === 'SELECT') {
                    return;
                }

                if (e.ctrlKey || e.metaKey) {
                    switch(e.key.toLowerCase()) {
                        case 'enter':
                            e.preventDefault();
                            fetchHoroscopeData();
                            break;
                        case 't':
                            e.preventDefault();
                            testApiConnection();
                            break;
                        case 'd':
                            e.preventDefault();
                            runDemoMode();
                            break;
                        case 'c':
                            e.preventDefault();
                            clearResults();
                            break;
                    }
                }
            });
        }

        // ÂàùÂßãÂåñÈ°µÈù¢
        function initializePage() {
            console.log('üöÄ ÂàùÂßãÂåñÁîüÂëΩÊñπÁ®ãÂºèÂ∫îÁî®...');
            
            // ËÆæÁΩÆÂΩìÂâçÊó•Êúü
            const today = new Date();
            const dateStr = today.toLocaleDateString('zh-CN', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                weekday: 'long'
            });
            
            const dateEl = safeGetElement('dateSubtitle');
            if (dateEl) {
                dateEl.textContent = `${dateStr} | Âü∫‰∫éËÅöÂêàÊï∞ÊçÆAPI`;
            }
            
            // ÁªëÂÆö‰∫ã‰ª∂ÁõëÂê¨Âô®
            const bindings = [
                { id: 'fetchBtn', handler: fetchHoroscopeData },
                { id: 'testApiBtn', handler: testApiConnection },
                { id: 'demoBtn', handler: runDemoMode },
                { id: 'clearBtn', handler: clearResults }
            ];

            bindings.forEach(({ id, handler }) => {
                const element = safeGetElement(id);
                if (element) {
                    element.addEventListener('click', handler);
                } else {
                    console.warn(`ÊåâÈíÆ ${id} Êú™ÊâæÂà∞`);
                }
            });

            // ËÆæÁΩÆÈîÆÁõòÂø´Êç∑ÈîÆ
            setupKeyboardShortcuts();
            
            console.log('‚úÖ ÁîüÂëΩÊñπÁ®ãÂºèÂàùÂßãÂåñÂÆåÊàê');
            
            // ÊòæÁ§∫Ê¨¢Ëøé‰ø°ÊÅØ
            showStatus(`üéâ Ê¨¢Ëøé‰ΩøÁî®ÁîüÂëΩÊñπÁ®ãÂºèÔºÅ

‚ú® GitHub Pages ÈÉ®ÁΩ≤ÁâàÁâπÊÄßÔºö
‚Ä¢ üåü ÁúüÂÆûAPIÊï∞ÊçÆËé∑Âèñ
‚Ä¢ üé≠ ÊºîÁ§∫Ê®°Âºè‰ΩìÈ™å  
‚Ä¢ üì± ÂÆåÁæéÂìçÂ∫îÂºèËÆæËÆ°
‚Ä¢ ‚å®Ô∏è ÈîÆÁõòÂø´Êç∑ÈîÆÊîØÊåÅ
‚Ä¢ üîß ÂÆåÊï¥ÈîôËØØÂ§ÑÁêÜÊú∫Âà∂

üöÄ Âø´Êç∑ÈîÆÊåáÂçóÔºö
‚Ä¢ Ctrl + Enter: Ëé∑ÂèñËøêÂäø
‚Ä¢ Ctrl + T: ÊµãËØïAPI
‚Ä¢ Ctrl + D: ÊºîÁ§∫Ê®°Âºè
‚Ä¢ Ctrl + C: Ê∏ÖÈô§Êï∞ÊçÆ

üí° ‰ΩøÁî®Âª∫ËÆÆÔºö
1. ÂÖàÁÇπÂáª"ÊºîÁ§∫Ê®°Âºè"‰ΩìÈ™åÁïåÈù¢
2. Ëé∑ÂèñAPIÂØÜÈí•ÂêéÊµãËØïËøûÊé•  
3. ÈÖçÁΩÆÂÆåÊàêÂç≥ÂèØËé∑ÂèñÁúüÂÆûÊï∞ÊçÆ

üåü Á´ãÂç≥ÂºÄÂßãÊÇ®ÁöÑÊòüÂ∫ßËøêÂäø‰πãÊóÖÂêßÔºÅ`, 'info');
        }

        // È°µÈù¢ÁîüÂëΩÂë®ÊúüÁÆ°ÁêÜ
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üìÑ DOMÂÜÖÂÆπÂä†ËΩΩÂÆåÊàê');
            initializePage();
        });

        window.addEventListener('load', function() {
            console.log('üåê È°µÈù¢ËµÑÊ∫êÂä†ËΩΩÂÆåÊàê');
            // Á°Æ‰øùÈ°µÈù¢ÂÆåÂÖ®Âä†ËΩΩÂêéÂÜçÊ¨°Ê£ÄÊü•ÂàùÂßãÂåñ
            if (!document.querySelector('.status:not(.hidden)')) {
                initializePage();
            }
        });

        // ÈîôËØØÂ§ÑÁêÜ
        window.addEventListener('error', function(e) {
            console.error('È°µÈù¢ÈîôËØØ:', e.error);
            showStatus(`‚ö†Ô∏è È°µÈù¢ÂèëÁîüÈîôËØØÔºö${e.error.message}

ËØ∑Â∞ùËØïÂà∑Êñ∞È°µÈù¢ÊàñËÅîÁ≥ªÊäÄÊúØÊîØÊåÅ„ÄÇ`, 'error');
        });

        // È°µÈù¢ÂèØËßÅÊÄßÂèòÂåñÂ§ÑÁêÜ
        document.addEventListener('visibilitychange', function() {
            if (document.visibilityState === 'visible' && isLoading) {
                showStatus('üîÑ È°µÈù¢ÈáçÊñ∞ÊøÄÊ¥ªÔºåËØ∑Ê£ÄÊü•Êìç‰ΩúÁä∂ÊÄÅ', 'info');
            }
        });

        console.log('üåü ÁîüÂëΩÊñπÁ®ãÂºè - GitHub PagesÁâàÊú¨Âä†ËΩΩÂÆåÊàê');
    </script>
</body>
</html> ÊòüÂ∫ßÊò†Â∞ÑÈÖçÁΩÆ
        const constellationMap = {
            'aries': { name: 'ÁôΩÁæäÂ∫ß', symbol: '‚ôà', period: '3.21-4.19' },
            'taurus': { name: 'ÈáëÁâõÂ∫ß', symbol: '‚ôâ', period: '4.20-5.20' },
            'gemini': { name: 'ÂèåÂ≠êÂ∫ß', symbol: '‚ôä', period: '5.21-6.21' },
            'cancer': { name: 'Â∑®ËüπÂ∫ß', symbol: '‚ôã', period: '6.22-7.22' },
            'leo': { name: 'ÁãÆÂ≠êÂ∫ß', symbol: '‚ôå', period: '7.23-8.22' },
            'virgo': { name: 'Â§ÑÂ•≥Â∫ß', symbol: '‚ôç', period: '8.23-9.22' },
            'libra': { name: 'Â§©Áß§Â∫ß', symbol: '‚ôé', period: '9.23-10.23' },
            'scorpio': { name: 'Â§©ËùéÂ∫ß', symbol: '‚ôè', period: '10.24-11.22' },
            'sagittarius': { name: 'Â∞ÑÊâãÂ∫ß', symbol: '‚ôê', period: '11.23-12.21' },
            'capricorn': { name: 'Êë©ÁæØÂ∫ß', symbol: '‚ôë', period: '12.22-1.19' },
            'aquarius': { name: 'Ê∞¥Áì∂Â∫ß', symbol: '‚ôí', period: '1.20-2.18' },
            'pisces': { name: 'ÂèåÈ±ºÂ∫ß', symbol: '‚ôì', period: '2.19-3.20' }
        };

        // ÂÖ®Â±ÄÁä∂ÊÄÅÁÆ°ÁêÜ
        let isLoading = false;
        let currentData = null;

        // Â∑•ÂÖ∑ÂáΩÊï∞
        function safeGetElement(id) {
            const element = document.getElementById(id);
            if (!element) {
                console.warn(`Êú™ÊâæÂà∞ÂÖÉÁ¥†: ${id}`);
            }
            return element;
        }

        function showStatus(message, type = 'info', autoHide = true) {
            const statusEl = safeGetElement('statusMessage');
            if (statusEl) {
                statusEl.className = `status ${type}`;
                statusEl.textContent = message;
                statusEl.classList.remove('hidden');
                
                if (type === 'info' && autoHide) {
                    setTimeout(() => hideStatus(), 4000);
                } else if (type === 'success' && autoHide) {
                    setTimeout(() => hideStatus(), 6000);
                }
            }
        }

        function hideStatus() {
            const statusEl = safeGetElement('statusMessage');
            if (statusEl) {
                statusEl.classList.add('hidden');
            }
        }

        function setLoading(loading) {
            isLoading = loading;
            const buttons = document.querySelectorAll('.btn');
            buttons.forEach(btn => {
                if (loading) {
                    btn.disabled = true;
                    if (btn.id === 'fetchBtn') {
                        btn.innerHTML = '<span class="loading-spinner"></span>Ëé∑Âèñ‰∏≠...';
                    }
                } else {
                    btn.disabled = false;
                    if (btn.id === 'fetchBtn') {
                        btn.innerHTML = 'üåü Ëé∑ÂèñÁúüÂÆûËøêÂäø';
                    }
                }
            });
        }

        // Ê∏ÖÈô§ÁªìÊûú
        function clearResults() {
            const resultsEl = safeGetElement('horoscopeResults');
            if (resultsEl) {
                resultsEl.classList.add('hidden');
                resultsEl.innerHTML = '';
            }
            currentData = null;
            showStatus('‚úÖ Êï∞ÊçÆÂ∑≤Ê∏ÖÈô§ÔºÅÂèØ‰ª•ÈáçÊñ∞Ëé∑ÂèñËøêÂäøÊï∞ÊçÆ„ÄÇ', 'success');
        }

        // ÂàõÂª∫ÊòüÂ∫ßËøêÂäøÂç°Áâá
        function createHoroscopeCard(data, isDemo = false) {
            const constellation = constellationMap[data.name] || { name: data.name, symbol: 'üåü', period: '' };
            const summary = data.summary || '‰ªäÊó•ËøêÂäøËâØÂ•ΩÔºå‰øùÊåÅÁßØÊûÅÂøÉÊÄÅ„ÄÇ';
            
            return `
                <div class="horoscope-card">
                    <h3 class="card-title">
                        ${constellation.symbol} ${constellation.name}
                        ${constellation.period ? `<br><small style="font-size:0.8em;opacity:0.7;">${constellation.period}</small>` : ''}
                    </h3>
                    <div class="card-content">
                        <h4>üí´ ${getTypeDisplayName()}ËøêÂäøÊ¶ÇËø∞</h4>
                        <p>${summary}</p>
                        
                        <h4>üíù Áà±ÊÉÖËøêÂäø</h4>
                        <p>${data.love_txt || 'Áà±ÊÉÖËøêÂäøËâØÂ•Ω'} <span class="star-rating">${'‚òÖ'.repeat(parseInt(data.love) || 4)}</span></p>
                        
                        <h4>üíº Â∑•‰ΩúËøêÂäø</h4>
                        <p>${data.work_txt || 'Â∑•‰ΩúËøêÂäøÂπ≥Á®≥'} <span class="star-rating">${'‚òÖ'.repeat(parseInt(data.work) || 4)}</span></p>
                        
                        <h4>üí∞ Ë¥¢Ëøê</h4>
                        <p>${data.money_txt || 'Ë¥¢ËøêÁ®≥ÂÆö'} <span class="star-rating">${'‚òÖ'.repeat(parseInt(data.money) || 4)}</span></p>
                        
                        <h4>üè• ÂÅ•Â∫∑ËøêÂäø</h4>
                        <p>${data.health_txt || 'ÂÅ•Â∫∑Áä∂ÂÜµËâØÂ•Ω'} <span class="star-rating">${'‚òÖ'.repeat(parseInt(data.health) || 4)}</span></p>
                        
                        <div class="lucky-info">
                            <h4>üçÄ Âπ∏ËøêÂÖÉÁ¥†</h4>
                            <p>Âπ∏ËøêÈ¢úËâ≤: <span class="color-preview" style="background-color: ${data.color || '#90EE90'};"></span>${data.color || 'ÁªøËâ≤'}</p>
                            <p>Âπ∏ËøêÊï∞Â≠ó: <strong>${data.number || '8'}</strong></p>
                            <p>ÈÄüÈÖçÊòüÂ∫ß: <strong>${constellationMap[data.QFriend]?.name || data.QFriend || 'Â§©Áß§Â∫ß'}</strong></p>
                        </div>
                        
                        ${isDemo ? '<div style="text-align:center;margin-top:15px;opacity:0.7;"><small>üé≠ ÊºîÁ§∫Êï∞ÊçÆ</small></div>' : ''}
                    </div>
                </div>
            `;
        }

        function getTypeDisplayName() {
            const consType = safeGetElement('consType')?.value || 'today';
            const typeMap = {
                'today': '‰ªäÊó•',
                'tomorrow': 'ÊòéÊó•', 
                'week': 'Êú¨Âë®',
                'month': 'Êú¨Êúà'
            };
            return typeMap[consType] || '‰ªäÊó•';
        }

        // ÊòæÁ§∫ËøêÂäøÁªìÊûú
        function displayResults(data, isDemo = false) {
            const resultsEl = safeGetElement('horoscopeResults');
            if (!resultsEl) return;
            
            if (Array.isArray(data)) {
                resultsEl.innerHTML = data.map(item => createHoroscopeCard(item, isDemo)).join('');
            } else {
                resultsEl.innerHTML = createHoroscopeCard(data, isDemo);
            }
            
            resultsEl.classList.remove('hidden');
            
            // ÊªöÂä®Âà∞ÁªìÊûúÂå∫Âüü
            setTimeout(() => {
                resultsEl.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }, 300);
        }

        //
